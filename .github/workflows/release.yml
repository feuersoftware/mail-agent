name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref_name || github.run_id }}
  cancel-in-progress: false

jobs:
  version:
    name: Determine release version from tag
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.set_version.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure tag commit is on main
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main --quiet
          if ! git merge-base --is-ancestor "$GITHUB_SHA" origin/main; then
            echo "Tag commit is not part of main. Aborting." >&2
            exit 1
          fi
            echo "Tag commit is on main."
      - name: Validate tag and set version
        id: set_version
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF}" != refs/tags/v* ]]; then
            echo "Error: Workflow must be triggered by a tag 'v*'." >&2
            exit 1
          fi
          ver="${GITHUB_REF#refs/tags/v}"
          echo "Release version: $ver"
          echo "release_version=$ver" >> "$GITHUB_OUTPUT"
      - name: Show previous tag diff (informational)
        shell: bash
        run: |
          git fetch --tags --quiet
          current="${GITHUB_REF#refs/tags/}"
            prev=$(git tag --sort=-creatordate | grep -v "^${current}$" | head -n1 || true)
          if [[ -z "$prev" ]]; then
            echo "First release tag (no previous tag found)."
            exit 0
          fi
          diffCount=$(git diff --name-only "$prev" "$current" | wc -l | tr -d ' ')
          if [[ "$diffCount" == "0" ]]; then
            echo "Warning: No changes between $prev and $current." >&2
          else
            echo "Changed files since $prev: $diffCount"
          fi

  build_and_package:
    name: Build and package (matrix)
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x86
          - os: windows-latest
            rid: win-x64
          - os: ubuntu-latest
            rid: linux-x64
          - os: ubuntu-latest
            rid: linux-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Restore
        run: dotnet restore MailAgent/MailAgent.csproj
      - name: Publish single-file executable
        shell: pwsh
        run: |
          $rid='${{ matrix.rid }}'
          $workspace='${{ github.workspace }}'
          $outDir = Join-Path $workspace (Join-Path 'publish' $rid)
          Write-Host "Publishing for $rid (ReleaseVersion=${{ needs.version.outputs.release_version }})"
          dotnet publish MailAgent/MailAgent.csproj -c Release -r $rid /p:PublishSingleFile=true /p:PublishTrimmed=false /p:SelfContained=true -o $outDir
      - name: Collect licenses
        id: collect_licenses
        uses: ./.github/actions/collect-licenses
        with:
          project: MailAgent/MailAgent.csproj
          output-file: licenses.md
      - name: Prepare artifact folder
        shell: pwsh
        run: |
          $workspace='${{ github.workspace }}'
          $rid='${{ matrix.rid }}'
          $publishDir = Join-Path $workspace (Join-Path 'publish' $rid)
          if (-Not (Test-Path $publishDir)) { Write-Error "Publish directory not found: $publishDir"; exit 1 }
          $exeName = if ($rid -like 'win-*') { 'FeuerSoftware.MailAgent.exe' } else { 'FeuerSoftware.MailAgent' }
          $exePath = Join-Path $publishDir $exeName
          if (-Not (Test-Path $exePath)) { Write-Error "Expected executable not found: $exePath"; exit 1 }
          $artifactDir = Join-Path $workspace ('artifact_' + $rid)
          if (Test-Path $artifactDir) { Remove-Item -Recurse -Force $artifactDir }
          New-Item -ItemType Directory -Path $artifactDir | Out-Null
          Copy-Item -Path (Join-Path $publishDir '*') -Destination $artifactDir -Recurse -Force
          $extras = @('MailAgent/readme.md','MailAgent/install.bat','MailAgent/uninstall.bat')
          foreach ($e in $extras) { $full = Join-Path $workspace $e; if (Test-Path $full) { Copy-Item -Path $full -Destination $artifactDir -Force } }
          # Copy collected license file (composite action output)
          $licenseFile = Join-Path $workspace 'licenses.md'
          if (Test-Path $licenseFile) { Copy-Item -Path $licenseFile -Destination (Join-Path $artifactDir 'licenses.md') -Force }
      - name: Create ZIP package
        shell: pwsh
        run: |
          $workspace='${{ github.workspace }}'
          $rid='${{ matrix.rid }}'
          $artifactDir = Join-Path $workspace ('artifact_' + $rid)
          $version='${{ needs.version.outputs.release_version }}'
          $zipName = "mail-agent-$version-$rid.zip"
          $releaseDir = Join-Path $workspace 'release'
          if (-Not (Test-Path $releaseDir)) { New-Item -ItemType Directory -Path $releaseDir | Out-Null }
          $zipPath = Join-Path $releaseDir $zipName
          if (Test-Path $zipPath) { Remove-Item -Force $zipPath }
          Compress-Archive -Path (Join-Path $artifactDir '*') -DestinationPath $zipPath -Force
          echo "zip_path=$zipPath" >> $env:GITHUB_OUTPUT
      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: mail-agent-${{ needs.version.outputs.release_version }}-${{ matrix.rid }}
          path: release/mail-agent-${{ needs.version.outputs.release_version }}-${{ matrix.rid }}.zip

  integrity_test:
    name: Integrity (Checksums & optional GPG Sign) + Verification
    needs: [version, build_and_package]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build_artifacts
      - name: Generate SHA256 checksums
        id: gen_checksums
        shell: bash
        run: |
          set -euo pipefail
          ART_DIR=build_artifacts
          mapfile -t ZIP_FILES < <(find "$ART_DIR" -type f -name '*.zip')
          if [ ${#ZIP_FILES[@]} -eq 0 ]; then echo "No ZIP files found" >&2; exit 1; fi
          OUT_FILE="$ART_DIR/checksums.sha256.txt"
          rm -f "$OUT_FILE"
          for z in "${ZIP_FILES[@]}"; do sha256sum "$z" | awk '{print tolower($1)"  "$2}' >> "$OUT_FILE"; done
          echo "checksums_file=$OUT_FILE" >> $GITHUB_OUTPUT
      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: integrity-assets
          path: build_artifacts/checksums.sha256.txt

  publish_release:
    name: Create GitHub Release and upload assets
    needs: [version, build_and_package, integrity_test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts
      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --quiet
          tag="v${{ needs.version.outputs.release_version }}"
          currentCommit=$(git rev-parse "$tag" 2>/dev/null || git rev-parse HEAD)
          prev=$(git tag --sort=-creatordate | grep -v "^$tag$" | head -n1 || true)
          if [[ -z "$prev" ]]; then
            notes="First release."
          else
            log=$(git log "$prev".."$currentCommit" --pretty=format:'* %h %s' | head -n200)
            if [[ -z "$log" ]]; then notes="No commit differences from $prev."; else notes="Changes since $prev:\n$log"; fi
          fi
          safe=$(echo "$notes" | sed ':a;N;$!ba;s/\r//g' | sed 's/$/%0A/'); safe=${safe%%%0A}
          echo "changelog=$safe" >> $GITHUB_OUTPUT
      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          ver='${{ needs.version.outputs.release_version }}'
          tag="v$ver"
          body="{{ steps.changelog.outputs.changelog }}"
          files=( $(find downloaded_artifacts -type f -name '*.zip') )
          if [ ${#files[@]} -eq 0 ]; then echo "No ZIP files to upload" >&2; exit 1; fi
          checksums=$(find downloaded_artifacts -type f -name 'checksums.sha256.txt' -maxdepth 2 || true)
          echo "Assets: ${#files[@]} ZIP(s)"; [ -n "$checksums" ] && echo "Checksums file: $checksums"
          if gh release view "$tag" >/dev/null 2>&1; then
            gh release upload "$tag" "${files[@]}" $checksums --clobber
          else
            gh release create "$tag" "${files[@]}" $checksums --title "mail-agent v$ver" --notes "$body"
          fi
      - name: Upload final artifacts bundle
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ needs.version.outputs.release_version }}
          path: downloaded_artifacts
